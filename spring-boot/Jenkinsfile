node {
	git poll:true, branch: 'master', credentialsId: 'github', url: 'https://github.com/zalkdo/spring.git'

    withCredentials([[$class: 'UsernamePasswordMultiBinding',
        credentialsId:'dockerhub',
        usernameVariable: 'DOCKER_USER_ID',
        passwordVariable: 'DOCKER_USER_PASSWORD']]){
           stage('Pull') { // for display purposes
              git branch: 'master', credentialsId: 'github', url: 'https://github.com/zalkdo/spring.git'
           }
           stage('Gradle'){
              sh "pwd"
              dir('spring-boot'){
                sh "./gradlew clean build print"
              }
           }
           /*
           stage('Unit Test') {
               sh(script: 'docker-compose run --rm unit')
           }
           */
           stage('Docker') {
				/*sh(script: 'docker build --force-rm=true -t ${DOCKER_USER_ID}/spring-boot:latest . ')*/
				def customImage = docker.build("${DOCKER_USER_ID}/spring-boot:${BUILD_NUMBER}","spring-boot")    

			   customImage.push()
			   customImage.push('latest')

           }
           stage('Deploy') {
        		try{
        		    
        		    sh(script: 'docker stop ${DOCKER_USER_ID}/spring-boot')
        		    sh(script: 'docker rm ${DOCKER_USER_ID}/spring-boot')
        		} catch(e) {
        		      echo "No ${DOCKER_USER_ID}/spring-boot container exists"
        		}
				sh(script : '''docker run -d -p 80:8080 --name ${DOCKER_USER_ID}/spring-boot ${DOCKER_USER_ID}/spring-boot:${BUILD_NUMBER}''')
           }
        }

}
