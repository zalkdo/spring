node {
	git poll:true, branch: 'master', credentialsId: 'github', url: 'https://github.com/zalkdo/spring.git'

    withCredentials([[$class: 'UsernamePasswordMultiBinding',
        credentialsId:'dockerhub',
        usernameVariable: 'DOCKER_USER_ID',
        passwordVariable: 'DOCKER_USER_PASSWORD']]){
           def customImage;
           stage('Pull') { // for display purposes
              git branch: 'master', credentialsId: 'github', url: 'https://github.com/zalkdo/spring.git'
           }
           stage('Gradle'){
              sh "pwd"
              dir('spring-boot'){
                sh "./gradlew clean build print"
              }
           }
           /*
           stage('Unit Test') {
               sh(script: 'docker-compose run --rm unit')
           }
           */
           stage('Build') {
				/*sh(script: 'docker build --force-rm=true -t ${DOCKER_USER_ID}/spring-boot:latest . ')*/
			   //customImage = docker.build("${DOCKER_USER_ID}/spring-boot:${BUILD_NUMBER}","spring-boot")
			   dir('spring-boot'){
			   	sh(script: 'docker-compose build app')
			   }
           }
           stage('Tag'){
               sh(script: 'docker tag ${DOCKER_USER_ID}/spring-boot ${DOCKER_USER_ID}/spring-boot:${BUILD_NUMBER}')               
           }

           stage('Push'){
           	   dir('spring-boot'){
           	   	sh(script: 'docker login')
			   	sh(script: 'docker-compose push app')
			   }
           /*
           	   docker.withRegistry("https://registry.hub.docker.com", "dockerhub"){
				   customImage.push()
				   customImage.push('latest')           	       
           	   }
           */
           }

           stage('Deploy') {
           		dir('spring-boot'){
           			sh(script: 'docker-compose up -d production')
           		}
        		/*try{
        		    sh(script: 'docker stop spring-boot')
        		    sh(script: 'docker rm spring-boot')
        		} catch(e) {
        		      echo "No ${DOCKER_USER_ID}/spring-boot container exists"
        		}
				sh(script : '''docker run -d -p 80:8080 --name spring-boot ${DOCKER_USER_ID}/spring-boot:${BUILD_NUMBER}''')
				*/
           }
        }

}
